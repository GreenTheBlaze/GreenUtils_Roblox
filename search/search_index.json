{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Greetings!</p> <p>If you're one of Green's friends or people authorized to use GreenUtils and you'd like to understand more on how to use the Roblox package, you've come to the right place!</p> <p>This documentation serves as a knowledge base for our package, everything here is kept up-to-date and should be referred to over anything else!</p> <p>Now, before we begin, first I'd like to introduce you to our example instance hierarchy tree which will be referred to throughout every API page you'll come across: <pre><code>.\n\u251c\u2500 Workspace           # Object 1 - ClassName: Workspace\n\u2502  \u251c\u2500 Camera           # Object 2 - ClassName: Camera\n\u2502  \u251c\u2500 Terrain          # Object 3 - ClassName: Terrain\n\u2502  \u251c\u2500 SpawnLocation    # Object 4 - ClassName: SpawnLocation\n\u2502  \u2502  \u2514\u2500 Decal         # Object 5 - ClassName: Decal\n\u2502  \u251c\u2500 Part1            # Object 6 - ClassName: MeshPart; BrickColor: Really red\n\u2502  \u251c\u2500 Part1            # Object 7 - ClassName: UnionOperation; BrickColor: Really red\n\u2502  \u251c\u2500 Part1            # Object 8 - ClassName: UnionOperation; BrickColor: Lime green\n\u2502  \u251c\u2500 Part1            # Object 9 - ClassName: UnionOperation; BrickColor: Really red\n\u2502  \u251c\u2500 Baseplate        # Object 10 - ClassName: Part; BrickColor: Dark grey metallic\n\u2502  \u2502  \u2514\u2500 Texture       # Object 11 - ClassName: Texture\n\u2502  \u251c\u2500 Part             # Object 12 - ClassName: Part\n\u2502  \u251c\u2500 Part             # Object 13 - ClassName: Part\n\u2502  \u251c\u2500 Part1            # Object 14 - ClassName: Part\n\u2502  \u2502  \u2514\u2500 Gui           # Object 15 - ClassName: SurfaceGui\n\u2502  \u2502     \u2514\u2500 Text       # Object 16 - ClassName: TextLabel\n\u2502  \u251c\u2500 Part1            # Object 17 - ClassName: Part\n\u2502  \u251c\u2500 Part1            # Object 18 - ClassName: Part\n\u2502  \u2502  \u2514\u2500 FooGui        # Object 19 - ClassName: SurfaceGui\n\u2502  \u2502     \u2514\u2500 TextLabel  # Object 20 - ClassName: TextLabel\n\u2502  \u251c\u2500 Part1            # Object 21 - ClassName: Part; BrickColor: Really red\n\u2502  \u251c\u2500 Part1            # Object 22 - ClassName: Part\n\u2502  \u2502  \u2514\u2500 Gui           # Object 23 - ClassName: SurfaceGui\n\u2502  \u2502     \u2514\u2500 Label      # Object 24 - ClassName: TextLabel\n\u2502  \u251c\u2500 Part1            # Object 25 - ClassName: TrussPart\n\u2502  \u251c\u2500 Part1            # Object 26 - ClassName: BillboardGui\n\u2502  \u2514\u2500 Part1            # Object 27 - ClassName: SurfaceGui\n\u2502  \u2514\u2500 Part1            # Object 28 - ClassName: SurfaceGui\n\u2514\u2500 Lighting            # Object 29 - ClassName: Lighting\n   \u251c\u2500 ALight           # Object 30 - ClassName: SurfaceLight\n   \u251c\u2500 PointLight       # Object 31 - ClassName: PointLight\n   \u251c\u2500 PointLight       # Object 32 - ClassName: Part\n   \u2514\u2500 PointLight1      # Object 33 - ClassName: Part\n</code></pre></p> <p>Here's some additional info you may need to know about the way I've structured this before we continue:</p> <ul> <li> <p>The default <code>BrickColor</code> for <code>BasePart</code> instances if not mentioned is Medium stone grey.</p> </li> <li> <p>All examples of code within the API sheets and anything relating to indexing of the hierarchy should relate to how it's been structured above, NOT how Roblox chooses to output results in Studio. The reason for this is that, Roblox is really weird about object finding, e.g., if I want to print out what <code>workspace.Part1.ClassName</code> is, on here it might look output \"MeshPart\" (Object 6), but on Roblox, it may have looked up differently. Unfortunately I cannot resolve this on the place file provided, so this will have to remain the same...</p> </li> </ul> <p>You can also download the place file if needed from here that the instances were originally arranged in!</p>"},{"location":"greenpathfindingservice-api/","title":"GreenPathfindingService","text":"<p>In Development</p> <p>This service is currently under development and may not work as intended, if at all.</p> <p>Like the default <code>PathfindingService</code> that Roblox uses, GreenPathfindingService is used to find logical paths between two points so that characters can move to different destinations without coming in contact with obstacles. However, this service differentiates from its inspirator, allowing for more advanced path generation in the air, as well as on ground. The service also takes into account obstacles and gap distances, which <code>PathfindingService</code> fails to do in some circumstances.</p>"},{"location":"greenpathfindingservice-api/#summary","title":"Summary","text":""},{"location":"greenpathfindingservice-api/#properties","title":"Properties","text":""},{"location":"greenpathfindingservice-api/#methods","title":"Methods","text":""},{"location":"greenpathfindingservice-api/#events","title":"Events","text":""},{"location":"greenpathfindingservice-api/#properties_1","title":"Properties","text":""},{"location":"greenpathfindingservice-api/#methods_1","title":"Methods","text":""},{"location":"greenpathfindingservice-api/#createpath","title":"createPath","text":"<p>Creates a <code>GreenPath</code> class based on the provided <code>agentParameters</code>. Valid keys and values in the agentParameters table are as follows:</p> Method Type Default Description agentRadius integer 2 Determines the minimum amount of horizontal space required for empty space to be considered traversable. agentHeight integer 5 Determines the minimum amount of vertical space required for empty space to be considered traversable. agentCanJump boolean true Determines whether jumping during pathfinding is allowed. agentCanClimb boolean false Determines whether climbing <code>TrussParts</code> during pathfinding is allowed. agentIsGrounded boolean true [In Construction] waypointSpacing number 4 Determines the spacing between intermediate waypoints in path. costs table {} Table of materials or defined <code>PathfindingModifiers</code> and their \"cost\" for traversal. Useful for making the agent prefer certain materials/regions over others. See here for details."},{"location":"greenpathfindingservice-api/#syntax","title":"Syntax","text":"<p><code>GreenPathfindingService:createPath(agentParameters: {[string]: any) \u2192 GreenPath</code></p>"},{"location":"greenpathfindingservice-api/#parameters","title":"Parameters","text":"<ul> <li><code>agentParameters</code>: Dictionary - Luau table which lets you fine-tune the path for the size of the agent (the humanoid that will move along the path). See above for valid keys, types, and descriptions. Default Value: \"nil\"</li> </ul>"},{"location":"greenpathfindingservice-api/#returns","title":"Returns","text":"<ul> <li><code>GreenPath</code> - A <code>GreenPath</code> object.</li> </ul>"},{"location":"greenpathfindingservice-api/#code-samples","title":"Code Samples","text":"<p>Sample required.</p> <pre><code>-- TODO: Add one.\n</code></pre>"},{"location":"greenpathfindingservice-api/#events_1","title":"Events","text":""},{"location":"greenpathfindingservice-api/#ignore-discard-reference","title":"[Ignore] Discard Reference","text":""},{"location":"greenpathfindingservice-api/#createinstance","title":"createInstance","text":"<p>Creates a new Instance of type <code>className</code> using the provided <code>propertyTable</code> to set the object's properties. Similar to the default constructor Instance.new which is already provided by Roblox.</p> <p>Syntax: <code>InstanceUtils:createInstance(className: string, propertyTable: {[string]: any}) \u2192 Instance</code></p> <p>Parameters:</p> <ul> <li> <p><code>className</code>: string - Class name of the new object to create.</p> </li> <li> <p><code>propertyTable</code>: Dictionary - The configuration dictionary in which the properties to configure for the new object should be listed.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Instance</code> - The object created.</li> </ul> <p>Code Example: <pre><code>local redPart = InstanceUtils:createInstance(\"Part\", {\n   Name = \"RedPart\",\n   BrickColor = BrickColor.new(1, 0, 0),\n   Parent = workspace.SpawnLocation\n})\n\n--[[\n   This works too, however, it's recommended you follow what was done with the\n   redPart as it's more efficient. If you're going to use this way, you MUST\n   set the ClassName first before any other properties!\n]]\nlocal yellowPart = InstanceUtils:createInstance(nil, {\n   ClassName = \"Part\",\n   Name = \"YellowPart\",\n   BrickColor = BrickColor.new(1, 1, 0),\n   Parent = workspace\n})\n\n--[[\n   Here, you can create children too within the method if you wanted to save\n   lines of space within programs, however these will not be returned.\n\n   This is the example tree structure that was created here:\n\n   GreenPart\n   \u251c\u2500 Baz\n   \u2502  \u251c\u2500 Garb\n   \u2502  \u2514\u2500 Jarp\n   \u2514\u2500 Bazifyer\n]]\nlocal greenPart = InstanceUtils:createInstance(\"Part\", {\n   Name = \"GreenPart\",\n   BrickColor = BrickColor.new(0, 1, 0),\n   Parent = workspace.SpawnLocation,\n   Children = {\n      {\n         ClassName = \"SurfaceGui\",\n         Name = \"Baz\",\n         Children = {\n            {\n               ClassName = \"TextLabel\",\n               Name = \"Garb\"\n            },\n            {\n               ClassName = \"TextBox\",\n               Name = \"Jarp\"\n            }\n         }\n      },\n      {\n         ClassName = \"UIGradient\",\n         Name = \"Bazifyer\"\n      }\n   }\n})\n\n-- Used to show the properties of created objects.\nprint(typeof(redPart)) --&gt; Instance\nprint(redPart.Parent.Name) --&gt; SpawnLocation\n\nprint(typeof(yellowPart)) --&gt; Instance\nprint(yellowPart.Parent.Name) --&gt; Workspace\n</code></pre></p>"},{"location":"greenpathstatus/","title":"info being added","text":""},{"location":"greenphysicsservice-api/","title":"info being added","text":""},{"location":"important-info/","title":"Info being added","text":""},{"location":"instanceutils-api/","title":"InstanceUtils API","text":"<p>Below listed are the methods/functions used in InstanceUtils!</p>"},{"location":"instanceutils-api/#miscellanious-functions","title":"Miscellanious Functions","text":""},{"location":"instanceutils-api/#createinstance","title":"createInstance","text":"<p>Creates a new Instance of type <code>className</code> using the provided <code>propertyTable</code> to set the object's properties. Similar to the default constructor Instance.new which is already provided by Roblox.</p> <p>Syntax: <code>InstanceUtils:createInstance(className: string, propertyTable: {[string]: any}) \u2192 Instance</code></p> <p>Parameters:</p> <ul> <li> <p><code>className</code>: string - Class name of the new object to create.</p> </li> <li> <p><code>propertyTable</code>: Dictionary - The configuration dictionary in which the properties to configure for the new object should be listed.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Instance</code> - The object created.</li> </ul> <p>Code Example: <pre><code>local redPart = InstanceUtils:createInstance(\"Part\", {\n   Name = \"RedPart\",\n   BrickColor = BrickColor.new(1, 0, 0),\n   Parent = workspace.SpawnLocation\n})\n\n--[[\n   This works too, however, it's recommended you follow what was done with the\n   redPart as it's more efficient. If you're going to use this way, you MUST\n   set the ClassName first before any other properties!\n]]\nlocal yellowPart = InstanceUtils:createInstance(nil, {\n   ClassName = \"Part\",\n   Name = \"YellowPart\",\n   BrickColor = BrickColor.new(1, 1, 0),\n   Parent = workspace\n})\n\n--[[\n   Here, you can create children too within the method if you wanted to save\n   lines of space within programs, however these will not be returned.\n\n   This is the example tree structure that was created here:\n\n   GreenPart\n   \u251c\u2500 Baz\n   \u2502  \u251c\u2500 Garb\n   \u2502  \u2514\u2500 Jarp\n   \u2514\u2500 Bazifyer\n]]\nlocal greenPart = InstanceUtils:createInstance(\"Part\", {\n   Name = \"GreenPart\",\n   BrickColor = BrickColor.new(0, 1, 0),\n   Parent = workspace.SpawnLocation,\n   Children = {\n      {\n         ClassName = \"SurfaceGui\",\n         Name = \"Baz\",\n         Children = {\n            {\n               ClassName = \"TextLabel\",\n               Name = \"Garb\"\n            },\n            {\n               ClassName = \"TextBox\",\n               Name = \"Jarp\"\n            }\n         }\n      },\n      {\n         ClassName = \"UIGradient\",\n         Name = \"Bazifyer\"\n      }\n   }\n})\n\n-- Used to show the properties of created objects.\nprint(typeof(redPart)) --&gt; Instance\nprint(redPart.Parent.Name) --&gt; SpawnLocation\n\nprint(typeof(yellowPart)) --&gt; Instance\nprint(yellowPart.Parent.Name) --&gt; Workspace\n</code></pre></p>"},{"location":"instanceutils-api/#createinstances","title":"createInstances","text":"<p>Creates multiple instances based on the provided configuration dictionary. Extended version of createInstance. Invalid properties provided will be flagged.</p> <p>Syntax: <code>InstanceUtils:createInstances(...: {[string]: any}) \u2192 ...Instance</code></p> <p>Parameters:</p> <ul> <li><code>propertyTables...</code>: Dictionary - The dictionaries containing each individual object's property settings, which will be used to create the intended Instance(s) correctly.</li> </ul> <p>Returns:</p> <ul> <li><code>Tuple</code> - The created instances.</li> </ul> <p>Code Example: <pre><code>local redPart, yellowPart = InstanceUtils:createInstances(\n   {\n      ClassName = \"Part\",\n      Name = \"RedPart\",\n      BrickColor = BrickColor.new(1, 0, 0),\n      Parent = workspace.SpawnLocation\n   },\n   {\n      ClassName = \"Part\",\n      Name = \"YellowPart\",\n      BrickColor = BrickColor.new(1, 1, 0),\n      Parent = workspace\n   }\n)\n\n-- Used to show the properties of the created instances.\nprint(typeof(redPart)) --&gt; Instance\nprint(redPart.Parent.Name) --&gt; SpawnLocation\n\nprint(typeof(yellowPart)) --&gt; Instance\nprint(yellowPart.Parent.Name) --&gt; Workspace\n</code></pre></p>"},{"location":"instanceutils-api/#setinstanceproperties","title":"setInstanceProperties","text":"<p>Sets an existing Instance's properties to the specified values provided in the <code>propertyTable</code>. Any invalid parameters will result in program execution termination.</p> <p>Syntax: <code>InstanceUtils:setInstanceProperties(targetInstance: Instance, propertyTable: {[string]: any}) \u2192 ()</code></p> <p>Parameters:</p> <ul> <li><code>targetInstance</code>: Instance - The object that's to have its properties changed.</li> </ul> <p>Returns:</p> <ul> <li><code>void</code></li> </ul> <p>Code Example: <pre><code>-- Use the createInstance method to make an example object.\nlocal foo = InstanceUtils:createInstance(\"Part\", {\n   Name = \"Foo\",\n   Parent = workspace\n})\n\n-- Output an example property, in this case the parent's Name to see the value\n-- before setting.\nprint(foo.Parent.Name) --&gt; Workspace\n\nInstanceUtils:setInstanceProperties(foo, {\n   Parent = game.Lighting\n})\n\n-- Output the property after setting change so we can confirm that it has been\n-- changed correctly.\nprint(foo.Parent.Name) --&gt; Lighting\n</code></pre></p>"},{"location":"instanceutils-api/#setinstancesproperties","title":"setInstancesProperties","text":"<p>Sets existing Instance's properties to the specified values provided. Any invalid parameters will result in program execution termination.</p> <p>Syntax: <code>InstanceUtils:setInstancesProperties(...: {[string]: any}) \u2192 ()</code></p> <p>Parameters:</p> <ul> <li><code>instanceConfigTables...</code>: Dictionary - The configuration dictionaries for each individual Instance that is to have their properties changed, which must contain a <code>cloneInstance</code> entry and a <code>propertyTable</code> entry.</li> </ul> <p>Returns:</p> <ul> <li><code>void</code></li> </ul> <p>Code Example: <pre><code>-- Use the createInstances method to make the example objects.\nlocal foo, bar = InstanceUtils:createInstances(\n   {\n      ClassName = \"Part\",\n      Name = \"Foo\",\n      Parent = workspace\n   },\n   {\n      ClassName = \"Part\",\n      Name = \"Bar\",\n      Parent = game.Lighting\n   }\n)\n\n-- Output an example property(s) from each instance, to see the value before\n-- setting.\nprint(foo.Name) --&gt; Foo\nprint(bar.Name) --&gt; Bar\n\nInstanceUtils:setInstancesProperties(\n   {\n      targetInstance = foo,\n      propertyTable: {\n         Name = \"FooBar\"\n      }\n   },\n   {\n      targetInstance = bar,\n      propertyTable: {\n         Name = \"BarFoo\"\n      }\n   }\n)\n\nprint(foo.Name) --&gt; FooBar\nprint(bar.Name) --&gt; BarFoo\n</code></pre></p>"},{"location":"instanceutils-api/#cloneandsetproperties","title":"cloneAndSetProperties","text":"<p>Creates a full copy of the provided <code>cloneInstance</code> including all of its descendants, ignoring all instances that are not Archivable.</p> <p>Syntax: <code>InstanceUtils:cloneAndSetProperties(cloneInstance: Instance, propertyTable: {[string]: any}) \u2192 Instance</code></p> <p>Parameters:</p> <ul> <li> <p><code>cloneInstance</code>: Instance - The object to be cloned.</p> </li> <li> <p><code>propertyTable</code>: Dictionary - The configuration table for the properties of each individual Instance being cloned.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Instance</code> - The cloned object.</li> </ul> <p>Code Example: <pre><code>local spawnLocation = workspace:FindFirstChild(\"SpawnLocation\")\n\n-- Used to show the properties of the original instances before they are cloned.\nprint(spawnLocation.BrickColor) --&gt; Medium stone grey\nprint(spawnLocation.Parent.Name) --&gt; Workspace\n\nlocal spawnLocation2 = InstanceUtils:cloneAndSetProperties(spawnLocation, {\n   Name = \"SpawnLocation2\",\n   BrickColor = BrickColor.new(\"Really red\"),\n   Parent = game.Lighting\n})\n\n-- Used to show the changes in properties of the newly cloned instances.\nprint(spawnLocation2.BrickColor) --&gt; Really red\nprint(spawnLocation2.Parent.Name) --&gt; Lighting\n</code></pre></p>"},{"location":"instanceutils-api/#clonesandsetproperties","title":"clonesAndSetProperties","text":"<p>Creates a full copy of the provided <code>cloneInstance</code> including all of its descendants, ignoring all instances that are not Archivable. Extended version of cloneAndSetProperties.</p> <p>Syntax: <code>InstanceUtils:clonesAndSetProperties(...: {[string]: any}) \u2192 ...Instance</code></p> <p>Parameters:</p> <ul> <li><code>cloneConfigTables...</code>: Dictionary - The configuration dictionaries for each individual Instance being cloned, which must contain both a <code>cloneInstance</code> entry and a <code>propertyTable</code> entry in each dictionary to be validated.</li> </ul> <p>Returns:</p> <ul> <li><code>Tuple</code> - The created instances.</li> </ul> <p>Code Example: <pre><code>local spawnLocation = workspace:FindFirstChild(\"SpawnLocation\")\nlocal baseplate = workspace:FindFirstChild(\"Baseplate\")\n\n-- Shows the properties of the original instances so we can compare them\n-- to after cloning.\nprint(spawnLocation.BrickColor) --&gt; Medium stone grey\nprint(spawnLocation.Parent.Name) --&gt; Workspace\n\nprint(baseplate.BrickColor) --&gt; Medium stone grey\nprint(baseplate.Parent.Name) --&gt; Workspace\n\nlocal spawnLocation2, baseplate2 = InstanceUtils:clonesAndSetProperties(\n   {\n      cloneInstance = spawnLocation,\n      propertyTable = {\n         Name = \"SpawnLocation2\",\n         BrickColor = BrickColor.new(\"Really red\"),\n         Parent = game.Lighting\n      }\n   },\n   {\n      cloneInstance = baseplate,\n      propertyTable = {\n         Name = \"Baseplate2\",\n         Parent = workspace.Terrain\n      }\n   }\n)\n\n-- Here we can see the new changes in the properties.\nprint(spawnLocation2.Name) --&gt; SpawnLocation2\nprint(spawnLocation2.Parent.Name) --&gt; Lighting\n\nprint(baseplate2.Name) --&gt; Baseplate2\nprint(baseplate2.Parent.Name) --&gt; Terrain\n</code></pre></p>"},{"location":"instanceutils-api/#get","title":"Get","text":"<p>This method extension focusses mainly on retrieving instances and outputting them in the form of an Instance array. Exceptions to this include the getting instances from path methods.</p>"},{"location":"instanceutils-api/#getsiblings","title":"getSiblings","text":"<p>Returns an array (a numerically indexed table) containing all direct siblings of the given <code>searchObject</code>. In other words, it retrieves every Instance that shares the same Parent as the <code>searchObject</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblings(searchObject: Instance) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li><code>searchObject</code>: Instance - The object to whom the siblings are going to be fetched from.</li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>local siblingsOfPointLight1 = InstanceUtils:getSiblings(game.Lighting.PointLight1) --&gt; {Object 30, Object 31, Object 32}\n</code></pre></p>"},{"location":"instanceutils-api/#getancestors","title":"getAncestors","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code>. Specifically, it retrieves every Instance in the hierarchy above the <code>searchObject</code> starting from its immediate Parent, working up towards the DataModel.</p> <p>Syntax: <code>InstanceUtils:getAncestors(searchObject: Instance) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li><code>searchObject</code>: Instance - The object to whom the ancestors are going to be fetched from.</li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- Note that it's retrieving ancestors from Object 20 here.\nlocal ancestorsOfBar = InstanceUtils:getAncestors(workspace.Part1.FooGui.TextLabel) --&gt; {Object 19, Object 18, Object 1, DataModel}\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofname","title":"getChildrenOfName","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfName(searchObject: Instance, name: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the children are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>local childrenOfLighting = InstanceUtils:getChildrenOfName(game.Lighting, \"PointLight\") --&gt; {Object 31, Object 32}\n\nprint(\"Name is '\" .. childrenOfLighting[1].Name .. \"' and ClassName is '\" .. childrenOfCamera2[1].ClassName .. \"'\") --&gt; Name is 'PointLight' and ClassName is 'PointLight'\nprint(\"Name is '\" .. childrenOfLighting[2].Name .. \"' and ClassName is '\" .. childrenOfCamera2[2].ClassName .. \"'\") --&gt; Name is 'PointLight' and ClassName is 'Part'\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofname","title":"getSiblingsOfName","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblingsOfName(searchObject: Instance, name: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>local siblingsOfWorkspace = InstanceUtils:getSiblingsOfName(workspace.Part1, \"Part2\") --&gt; {workspace.Part2, workspace.Part2, workspace.Part2, workspace.Part2}\n\nfor _, sibling in siblingsOfASimpleTruss do\n   print(sibling.Name)\n   -- Output:\n   --&gt; Part2\n   --&gt; Part2\n   --&gt; Part2\n   --&gt; Part2\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofname","title":"getDescendantsOfName","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfName(searchObject: Instance, name: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- Confirm there are no instances named \"Jarp\" beforehand so we can confirm this\n-- works.\nlocal descendantsOfLightning = InstanceUtils:getDescendantsOfName(game.ReplicatedStorage, \"Jarp\") --&gt; {}\n\nlocal jarp, baz = InstanceUtils:createInstances(\n   {\n      ClassName = \"SurfaceGui\",\n      Name = \"Jarp\",\n      Parent = game.ReplicatedStorage\n      Children = {\n         {\n            ClassName = \"TextLabel\",\n            Name = \"Jarp\"\n         }\n      }\n   },\n   {\n      ClassName = \"SurfaceGui\",\n      Name = \"Frobulator\",\n      Parent = game.ReplicatedStorage\n   }\n)\n\ndescendantsOfLightning = InstanceUtils:getDescendantsOfName(game.ReplicatedStorage, \"Jarp\") --&gt; {game.ReplicatedStorage.Jarp, game.ReplicatedStorage.Jarp.Jarp}\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofname","title":"getAncestorsOfName","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfName(searchObject: Instance, name: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofnamerange","title":"getChildrenOfNameRange","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of values in <code>nameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfNameRange(searchObject: Instance, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the children are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofnamerange","title":"getSiblingsOfNameRange","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of values in <code>nameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfNameRange(searchObject: Instance, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofnamerange","title":"getDescendantsOfNameRange","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of values in <code>nameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfNameRange(searchObject: Instance, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofnamerange","title":"getAncestorsOfNameRange","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of values in <code>nameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfNameRange(searchObject: Instance, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofclass","title":"getChildrenOfClass","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfClass(searchObject: Instance, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the children are going to be fetched from.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>local childrenOfLighting = InstanceUtils:getChildrenOfClass(game.Lighting, \"Part\") --&gt; {Object 32, Object 33}\n\nprint(\"Name is '\" .. childrenOfLighting[1].Name .. \"' and ClassName is '\" .. childrenOfCamera2[1].ClassName .. \"'\") --&gt; Name is 'PointLight' and ClassName is 'Part'\nprint(\"Name is '\" .. childrenOfLighting[2].Name .. \"' and ClassName is '\" .. childrenOfCamera2[2].ClassName .. \"'\") --&gt; Name is 'PointLight1' and ClassName is 'Part'\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofclass","title":"getSiblingsOfClass","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblingsOfClass(searchObject: Instance, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofclass","title":"getDescendantsOfClass","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfClass(searchObject: Instance, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofclass","title":"getAncestorsOfClass","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfClass(searchObject: Instance, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofclassrange","title":"getChildrenOfClassRange","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their Object.ClassName properties are equal to any of values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfClassRange(searchObject: Instance, classNameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the children are going to be fetched from.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofclassrange","title":"getSiblingsOfClassRange","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblingsOfClassRange(searchObject: Instance, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofclassrange","title":"getDescendantsOfClassRange","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfClassRange(searchObject: Instance, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofclassrange","title":"getAncestorsOfClassRange","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfClassRange(searchObject: Instance, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofnameandclass","title":"getChildrenOfNameAndClass","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code> and their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfNameAndClass(searchObject: Instance, name: string, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the children are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the children to be compared to.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofnameandclass","title":"getSiblingsOfNameAndClass","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code> and their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblingsOfNameAndClass(searchObject: Instance, name: string, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the siblings to be compared to.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofnameandclass","title":"getDescendantsOfNameAndClass","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code> and their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfNameAndClass(searchObject: Instance, name: string, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the descendants to be compared to.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofnameandclass","title":"getAncestorsOfNameAndClass","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their Instance.Name properties are equal to the given <code>name</code> and their Object.ClassName properties are equal to the given <code>className</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfNameAndClass(searchObject: Instance, name: string, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The object to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the ancestors to be compared to.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofnamerangeandclassrange","title":"getChildrenOfNameRangeAndClassRange","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of the values in <code>nameRangeTable</code> and their Object.ClassName properties are equal to any of the values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfNameRangeAndClassRange(searchObject: Instance, nameRangeTable: {string}, classNameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the children are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the children to be compared to.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofnamerangeandclassrange","title":"getSiblingsOfNameRangeAndClassRange","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of the values in <code>nameRangeTable</code> and their Object.ClassName properties are equal to any of the values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblingsOfNameRangeAndClassRange(searchObject: Instance, nameRangeTable: {string}, classNameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the siblings to be compared to.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofnamerangeandclassrange","title":"getDescendantsOfNameRangeAndClassRange","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of the values in <code>nameRangeTable</code> and their Object.ClassName properties are equal to any of the values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfNameRangeAndClassRange(searchObject: Instance, nameRangeTable: {string}, classNameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the descendants to be compared to.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofnamerangeandclassrange","title":"getAncestorsOfNameRangeAndClassRange","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their Instance.Name properties are equal to any of the values in <code>nameRangeTable</code> and their Object.ClassName properties are equal to any of the values in <code>classNameRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfNameRangeAndClassRange(searchObject: Instance, nameRangeTable: {string}, classNameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the ancestors to be compared to.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofproperties","title":"getChildrenOfProperties","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their properties match the given ones from the <code>propertyTable</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfProperties(searchObject: Instance, propertyTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the children are going to be fetched from.</p> </li> <li> <p><code>propertyTable</code>: Array - The individual Instance.Name values of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofproperties","title":"getSiblingsOfProperties","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their properties match the given ones from the <code>propertyTable</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblingsOfProperties(searchObject: Instance, propertyTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>propertyTable</code>: Array - The individual Instance.Name values of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofproperties","title":"getDescendantsOfProperties","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their properties match the given ones from the <code>propertyTable</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfProperties(searchObject: Instance, propertyTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>propertyTable</code>: Array - The individual Instance.Name values of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofproperties","title":"getAncestorsOfProperties","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their properties match the given ones from the <code>propertyTable</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfProperties(searchObject: Instance, propertyTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>propertyTable</code>: Array - The individual Instance.Name values of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getchildrenofpropertiesrange","title":"getChildrenOfPropertiesRange","text":"<p>Returns an array containing all children of the given <code>searchObject</code> of which their properties match at least one of the given ones from the <code>propertyRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getChildrenOfPropertiesRange(searchObject: Instance, propertyRangeTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the children are going to be fetched from.</p> </li> <li> <p><code>propertyRangeTable</code>: Array - The individual Instance.Name values of the children to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s children.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getsiblingsofpropertiesrange","title":"getSiblingsOfPropertiesRange","text":"<p>Returns an array containing all siblings of the given <code>searchObject</code> of which their properties match at least one of the given ones from the <code>propertyRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getSiblingsOfPropertiesRange(searchObject: Instance, propertyRangeTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the siblings are going to be fetched from.</p> </li> <li> <p><code>propertyRangeTable</code>: Array - The individual Instance.Name values of the siblings to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s siblings.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getdescendantsofpropertiesrange","title":"getDescendantsOfPropertiesRange","text":"<p>Returns an array containing all descendants of the given <code>searchObject</code> of which their properties match at least one of the given ones from the <code>propertyRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getDescendantsOfPropertiesRange(searchObject: Instance, propertyRangeTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the descendants are going to be fetched from.</p> </li> <li> <p><code>propertyRangeTable</code>: Array - The individual Instance.Name values of the descendants to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s descendants.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getancestorsofpropertiesrange","title":"getAncestorsOfPropertiesRange","text":"<p>Returns an array containing all ancestors of the given <code>searchObject</code> of which their properties match at least one of the given ones from the <code>propertyRangeTable</code>.</p> <p>Syntax: <code>InstanceUtils:getAncestorsOfPropertiesRange(searchObject: Instance, propertyRangeTable: {[string]: any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchObject</code>: Instance - The instance to whom the ancestors are going to be fetched from.</p> </li> <li> <p><code>propertyRangeTable</code>: Array - The individual Instance.Name values of the ancestors to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the <code>searchObject</code>'s ancestors.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getinstancesfromtable","title":"getInstancesFromTable","text":"<p>Add desc</p> <p>Syntax: <code>InstanceUtils:getInstancesFromTable(searchTable: {any}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li><code>searchTable</code>: table - The table of values that will be checked through to retrieve the Instance objects present in the table.</li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the found instances.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getinstancesofnamefromtable","title":"getInstancesOfNameFromTable","text":"<p>Add desc</p> <p>Syntax: <code>InstanceUtils:getInstancesOfNameFromTable(searchTable: {any}, name: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchTable</code>: table - The table of values that will be checked through to retrieve the Instance objects present in the table that match the given <code>name</code>.</p> </li> <li> <p><code>name</code>: string - The Instance.Name of the found instances to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the found instances.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getinstancesofnamerangefromtable","title":"getInstancesOfNameRangeFromTable","text":"<p>Add desc</p> <p>Syntax: <code>InstanceUtils:getInstancesOfNameRangeFromTable(searchTable: {any}, nameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchTable</code>: table - The table of values that will be checked through to retrieve the Instance objects present in the table that match at least one of the provided names from the <code>nameRangeTable</code>.</p> </li> <li> <p><code>nameRangeTable</code>: Array - The individual Instance.Name values of the instances to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the found instances.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getinstancesofclassfromtable","title":"getInstancesOfClassFromTable","text":"<p>Add desc</p> <p>Syntax: <code>InstanceUtils:getInstancesOfClassFromTable(searchTable: {any}, className: string) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchTable</code>: table - The table of values that will be checked through to retrieve the Instance objects present in the table that match the given <code>name</code>.</p> </li> <li> <p><code>className</code>: string - The Object.ClassName of the instances to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the found instances.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p>"},{"location":"instanceutils-api/#getinstancesofclassrangefromtable","title":"getInstancesOfClassRangeFromTable","text":"<p>Add desc</p> <p>Syntax: <code>InstanceUtils:getInstancesOfClassRangeFromTable(searchTable: {any}, classNameRangeTable: {string}) \u2192 {Instance}</code></p> <p>Parameters:</p> <ul> <li> <p><code>searchTable</code>: table - The table of values that will be checked through to retrieve the Instance objects present in the table that match at least one of the provided names from the <code>nameRangeTable</code>.</p> </li> <li> <p><code>classNameRangeTable</code>: Array - The individual Object.ClassName values of the instances to be compared to.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Array</code> - An array containing the found instances.</li> </ul> <p>Code Example: <pre><code>-- TODO: Make this.\n</code></pre></p> <p>InstanceUtils:getInstancesOfClassRangeFromTable</p> <p>InstanceUtils:getInstancesOfNameAndClassFromTable</p> <p>InstanceUtils:getInstancesOfNameRangeAndClassRangeFromTable</p> <p>InstanceUtils:getInstancesOfPropertiesFromTable</p> <p>InstanceUtils:getInstancesOfPropertiesRangeFromTable</p> <p>InstanceUtils:getInstancesOfPropertiesRangeFromTable</p>"},{"location":"webhookservice-api/","title":"info being added","text":""}]}